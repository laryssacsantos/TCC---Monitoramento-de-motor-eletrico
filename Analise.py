# -*- coding: utf-8 -*-
"""TCC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qEXB-IsFQrcx8RWV6AdHmIM5EF8v7c3d

I**ntegração Python com Google Sheets para Análise de dados**

Instalando `gspread`
"""

!pip install gspread oauth2client

CODE = '1xV2AKTecI4YxODNPGLtxUwgXYUKoPw44AmGnglsi2Js' # Código (ID) da planilha
DICT = {}

gc = gspread.service_account(filename = '/content/drive/MyDrive/TCC/key.json') #Path do seu JSON carregando as chaves
sh = gc.open_by_key(CODE)
ws = sh.worksheet('Página1') # Página por título

wss = sh.worksheets() #Pegando todas as planilhas

for ws in wss:
    DICT[ws.title] = ws.get_all_values()

import gspread
import matplotlib.pyplot as plt

# Configurações iniciais
CODE = '1xV2AKTecI4YxODNPGLtxUwgXYUKoPw44AmGnglsi2Js'  # ID da planilha
gc = gspread.service_account(filename='/content/drive/MyDrive/TCC/key.json')  # Credenciais

# Função para gerar gráfico
def gerar_grafico(sheet_name, x_range, y_range):
    ws = gc.open_by_key(CODE).worksheet(sheet_name)  # Acessar a aba
    x_values = ws.get(x_range)  # Ler intervalo X
    y_values = ws.get(y_range)  # Ler intervalo Y

    # Convertendo os dados em listas
    x_labels = [row[0] for row in x_values]  # Valores X
    y_values = [float(row[0]) for row in y_values]  # Valores Y

    # Gerando o gráfico
    plt.figure(figsize=(10, 5))
    plt.plot(x_labels, y_values, marker='o')
    plt.title(f'Gráfico de Linha - {sheet_name}')
    plt.xlabel('Eixo X')
    plt.ylabel('Eixo Y')
    plt.xticks(rotation=45)  # Rotacionar rótulos do eixo x se necessário
    plt.grid()

    # Mostrar o gráfico
    plt.tight_layout()
    plt.show()

# Exemplo de uso da função
gerar_grafico('Magnitude', 'A1:A10', 'B1:B10')  # Substitua os intervalos conforme necessário

gerar_grafico('Temperature1', 'A1:A10', 'B1:B10')  # Substitua os intervalos conforme necessário

gerar_grafico('Temperature2', 'A1:A10', 'B1:B10')

gerar_grafico('Temperature3', 'A1:A10', 'B1:B10')

!pip install gspread oauth2client
!pip install dash
!pip install dash-html-components
!pip install dash-core-components
!pip install matplotlib
import gspread
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import matplotlib.pyplot as plt
import base64
import io

# Configurações iniciais
CODE = '1xV2AKTecI4YxODNPGLtxUwgXYUKoPw44AmGnglsi2Js'  # ID da planilha
gc = gspread.service_account(filename='/content/drive/MyDrive/TCC/key.json')  # Credenciais

# Inicializar o Dash
app = dash.Dash(__name__)

# Função para gerar gráfico e retornar como imagem
def gerar_grafico(sheet_name, x_range, y_range):
    ws = gc.open_by_key(CODE).worksheet(sheet_name)  # Acessar a aba
    x_values = ws.get(x_range)  # Ler intervalo X
    y_values = ws.get(y_range)  # Ler intervalo Y

    # Convertendo os dados em listas
    x_labels = [row[0] for row in x_values]  # Valores X
    y_values = [float(row[0]) for row in y_values]  # Valores Y

    # Gerando o gráfico
    plt.figure(figsize=(10, 5))
    plt.plot(x_labels, y_values, marker='o')
    plt.title(f'Gráfico de Linha - {sheet_name}')
    plt.xlabel('Eixo X')
    plt.ylabel('Eixo Y')

    # Salvar o gráfico em um buffer em memória
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return base64.b64encode(buf.getvalue()).decode('utf-8')

# Layout do Dash
app.layout = html.Div([
    dcc.Dropdown(
        id='aba-dropdown',
        options=[
            {'label': 'Magnitude', 'value': 'Magnitude'},
            {'label': 'Temperature1', 'value': 'Temperature1'},
            {'label': 'Temperature2', 'value': 'Temperature2'},
            {'label': 'Temperature3', 'value': 'Temperature3'}
        ],
        value='Magnitude'  # Valor padrão
    ),
    dcc.Graph(id='grafico'),
    dcc.Interval(
        id='intervalo',
        interval=10*1000,  # Atualiza a cada 10 segundos
        n_intervals=0
    )
])

# Callback para atualizar o gráfico
@app.callback(
    Output('grafico', 'figure'),
    Input('aba-dropdown', 'value'),
    Input('intervalo', 'n_intervals')
)
def atualizar_grafico(sheet_name, n_intervals):
    img_src = gerar_grafico(sheet_name, 'A1:A10', 'B1:B10')

    return {
        'data': [],
        'layout': {
            'images': [{
                'source': f'data:image/png;base64,{img_src}',
                'xref': 'paper', 'yref': 'paper',
                'x': 0.5, 'y': 0.5, 'sizex': 1, 'sizey': 1,
                'xanchor': 'center', 'yanchor': 'middle',
                'layer': 'below'
            }],
            'height': 500, 'width': 800
        }
    }

# Executar o aplicativo
if __name__ == '__main__':
    app.run_server(debug=True, use_reloader=False)  # use_reloader=False para evitar duplicação